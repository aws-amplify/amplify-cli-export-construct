# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: release-beta
on:
  push:
    branches:
      - beta
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.17.6
      - name: Install dependencies
        run: npm ci
      - name: release:beta
        run: npx projen release:beta
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_github:
    name: Publish to GitHub Releases
    needs: integration_tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R
          $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt)
          --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode
          -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then
          cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  release_npm:
    name: Publish to npm
    needs: integration_tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_maven:
    name: Publish to Maven Central
    needs: integration_tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: ${{ secrets.MAVEN_STAGING_PROFILE_ID }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_pypi:
    name: Publish to PyPI
    needs: integration_tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  release_nuget:
    name: Publish to NuGet Gallery
    needs: integration_tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    container:
      image: jsii/superchain:1-buster-slim-node14
  integration_tests:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main
          repository: ammarkarachi/amplify-cli-export-construct
          path: amplify-cli-export-construct
      - name: Setup Node.js
        uses: actions/setup-node@v2.2.0
        with:
          node-version: 14.17.6
      - name: Install Amplify CLI
        run: |
          npm i @aws-amplify/cli@5.5.0-amplify-export.1
          npm i -g @aws-amplify/cli@5.5.0-amplify-export.1
          which amplify
          amplify_path=$(which amplify)
          echo "AMPLIFY_PATH=$amplify_path" >> $GITHUB_ENV
          echo ${{ env.AMPLIFY_PATH }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ammarkarachi/amplify-cli
          ref: refactor/packaging
          path: amplify-cli
      - name: Build Amplify E2E Core
        run: |
          cd amplify-cli/packages/amplify-headless-interface
          yarn install
          yarn build
          cd ../amplify-e2e-core
          yarn install
          yarn build
          cd ~/
      - name: Copy E2E Core
        run: >
          cp -r amplify-cli/packages/amplify-headless-interface
          amplify-cli-export-construct/integ-test/amplify-headless-interface

          cp -r amplify-cli/packages/amplify-e2e-core amplify-cli-export-construct/integ-test/amplify-e2e-core

          ls -l amplify-cli-export-construct/integ-test/
      - name: Run Test
        run: |
          cd amplify-cli-export-construct
          npm ci
          cd integ-test/amplify-e2e-core
          yarn install
          cd ../../
          amplify -v
          ./node_modules/jest/bin/jest.js --verbose --ci --collect-coverage
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
